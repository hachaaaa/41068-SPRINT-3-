/**
 * @mainpage ROS2 Sprint 3 Documentation
 *
 * @section intro_sec Introduction
 * This documentation covers the Sprint 3 tasks focusing on SLAM and Path Planning in the ROS2 framework using the TurtleBot3 Waffle Pi robot.
 * 
 * The following sections provide an overview of how SLAM and Path Planning were implemented, as well as the challenges encountered and their solutions.
 *
 * @section slam_intro_sec SLO 3.2 - SLAM in Gazebo Environment
 * SLAM (Simultaneous Localization and Mapping) is essential for enabling the robot to build a map of an unknown environment while tracking its position. For this project:
 * - I utilized the SLAM toolbox to generate a map using TurtleBot3 in a simulated Gazebo world.
 * - The robot was controlled via teleoperation to explore and generate the map.
 * - The generated map was overlaid on the Gazebo ground truth map for validation.
 *
 * @subsection slam_steps Steps to Run SLAM:
 * - **Terminal 1**: Launch the Gazebo world with TurtleBot3:
 *   ```bash
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   ros2 launch sprint3 turtlebot3_lib.launch.py
 *   ```
 * - **Terminal 2**: Teleoperate the robot using the keyboard:
 *   ```bash
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   ros2 run turtlebot3_teleop teleop_keyboard
 *   ```
 * - **Terminal 3**: Start the SLAM toolbox for mapping:
 *   ```bash
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   ros2 run slam_toolbox sync_slam_toolbox_node --ros-args -p use_sim_time:=true
 *   ```
 * - **Terminal 4**: Visualize the mapping in RViz:
 *   ```bash
 *   rviz2 -d ~/ros2_ws/src/sprint3/rviz/slam_mapping.rviz
 *   ```
 * - **Terminal 5**: Save the generated map:
 *   ```bash
 *   ros2 run nav2_map_server map_saver_cli -f ~/ros2_ws/src/sprint3/maps/my_map
 *   ```
 *
 * @subsection slam_map_overlay Overlaying Generated Map:
 * - To overlay the generated map with the Gazebo ground truth map:
 *   ```bash
 *   cd ~/ros2_ws/src/sprint3
 *   python3 overlay_map.py
 *   ```
 * - To stop the python process, use:
 *   ```bash
 *   ps aux | grep python
 *   ```
 *   Then kill the process by its PID.
 *
 * @section path_planning_sec SLO 3.5 - Path Planning in Gazebo Environment
 * Path planning enables a robot to navigate from a specified start point to a goal while avoiding obstacles. 
 * 
 * **Steps to Execute Path Planning**:
 * - **Set up the library Gazebo environment**:
 *   ```bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   ros2 launch sprint3 turtlebot3_lib.launch.py
 *   ```
 * - **Run the map server** to load the generated map:
 *   ```bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=/home/student/ros2_ws/src/sprint3/maps/my_map.yaml
 *   ```
 * - **Launch localization** to estimate the robot's position:
 *   ```bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   ros2 launch nav2_bringup localization_launch.py map:=/home/student/ros2_ws/src/sprint3/maps/my_map.yaml
 *   ```
 * - **Start the navigation stack** to enable path planning:
 *   ```bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   source /opt/ros/humble/setup.bash
 *   source ~/ros2_ws/install/setup.bash
 *   ros2 launch nav2_bringup navigation_launch.py use_sim_time:=true map:=/home/student/ros2_ws/src/sprint3/maps/my_map.yaml
 *   ```
 * - **In RViz**: Set the initial pose and goal using the 2D Pose Estimate and Navigation Goal tools:
 *   ```bash
 *   export TURTLEBOT3_MODEL=waffle_pi
 *   source ~/ros2_ws/install/setup.bash
 *   ros2 launch nav2_bringup rviz_launch.py
 *   ```
 * 
 * @section github_sec GitHub Repository
 * The source code for SLAM and Path Planning can be found in the repository below. It also contains additional project files and documentation generated by Doxygen.
 * 
 * GitHub Repository: [https://github.com/hachaaaa/41068-SPRINT-3-](https://github.com/hachaaaa/41068-SPRINT-3-)
 */
